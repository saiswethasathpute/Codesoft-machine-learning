import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
from imblearn.over_sampling import SMOTE  # For handling class imbalance

# Step 1: Load the dataset (replace with your actual dataset file path)
data = pd.read_csv('creditcard.csv')  # Ensure you have the correct file path

# Step 2: Data Preprocessing
# Check for missing values
print("Missing values per column:")
print(data.isnull().sum())

# Features (exclude the target and non-relevant columns)
X = data.drop(columns=['Class', 'Time'])  # 'Time' may not be useful
y = data['Class']  # Target variable (fraudulent or legitimate)

# Handle Class Imbalance using SMOTE (Synthetic Minority Over-sampling Technique)
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Step 3: Feature Scaling (important for Logistic Regression and Distance-based methods)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_resampled)

# Step 4: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_resampled, test_size=0.2, random_state=42)

# Step 5: Model Training and Evaluation

# Logistic Regression
log_reg = LogisticRegression(max_iter=1000)
log_reg.fit(X_train, y_train)
y_pred_log_reg = log_reg.predict(X_test)

# Decision Tree Classifier
decision_tree = DecisionTreeClassifier(random_state=42)
decision_tree.fit(X_train, y_train)
y_pred_tree = decision_tree.predict(X_test)

# Random Forest Classifier
random_forest = RandomForestClassifier(random_state=42)
random_forest.fit(X_train, y_train)
y_pred_forest = random_forest.predict(X_test)

# Step 6: Evaluate the models

# Logistic Regression Metrics
print("Logistic Regression Classification Report:\n", classification_report(y_test, y_pred_log_reg))
print("Logistic Regression ROC-AUC:", roc_auc_score(y_test, y_pred_log_reg))

# Decision Tree Metrics
print("Decision Tree Classification Report:\n", classification_report(y_test, y_pred_tree))
print("Decision Tree ROC-AUC:", roc_auc_score(y_test, y_pred_tree))

# Random Forest Metrics
print("Random Forest Classification Report:\n", classification_report(y_test, y_pred_forest))
print("Random Forest ROC-AUC:", roc_auc_score(y_test, y_pred_forest))



